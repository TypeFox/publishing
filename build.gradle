/* 
 * Publishing script for open-source projects
 * Copyright 2016 TypeFox GmbH
 */

if (!hasProperty('publish.version')) {
	if (hasProperty('PUBLISH_VERSION'))
		ext.'publish.version' = property('PUBLISH_VERSION')
	else
		throw new ProjectConfigurationException("The version to be published has to be set with -Ppublish.version=<version>", null)
}
if (!hasProperty('publish.branch'))
	ext.'publish.branch' = 'master'


//--------------------------------------------------------------------
// Source repositories for fetching artifacts built by Jenkins

def jenkinsRepo = { jobName ->
	"http://services.typefox.io/open-source/jenkins/job/$jobName/lastStableBuild/artifact/build/maven-repository/"
}
def jenkinsPipelineRepo = { jobName ->
	"http://services.typefox.io/open-source/jenkins/job/$jobName/job/${property('publish.branch')}/lastStableBuild/artifact/build/maven-repository/"
}
repositories {
	maven { url jenkinsRepo('lsapi') }
	maven { url jenkinsPipelineRepo('xtext-lib') }
	maven { url jenkinsPipelineRepo('xtext-core') }
	maven { url jenkinsPipelineRepo('xtext-extras') }
	maven { url jenkinsPipelineRepo('xtext-web') }
	jcenter()
}

apply from: "artifacts.gradle"

//--------------------------------------------------------------------
// Definition and configuration of dependencies, artifacts, and tasks

apply plugin: 'signing'
if (!hasProperty('signing.secretKeyRingFile') && hasProperty('SIGNING_SECRETKEYRINGFILE'))
	ext.'signing.secretKeyRingFile' = property('SIGNING_SECRETKEYRINGFILE')
if (!hasProperty('signing.keyId') && hasProperty('SIGNING_KEYID'))
	ext.'signing.keyId' = property('SIGNING_KEYID')
if (!hasProperty('signing.password') && hasProperty('SIGNING_PASSWORD'))
	ext.'signing.password' = property('SIGNING_PASSWORD')
def doSigning = !hasProperty('signing.skip') || property('signing.skip') != 'true'

apply plugin: 'maven-publish'
if (!hasProperty('publishing.userName') && hasProperty('PUBLISHING_USERNAME'))
	ext.'publishing.userName' = property('PUBLISHING_USERNAME')
if (!hasProperty('publishing.password') && hasProperty('PUBLISHING_PASSWORD'))
	ext.'publishing.password' = property('PUBLISHING_PASSWORD')
def isSnapshot = property('publish.version').endsWith('-SNAPSHOT')
publishing.repositories {
	maven {
		if (isSnapshot)
			url "https://oss.sonatype.org/content/repositories/snapshots/"
		else
			url "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
		if (findProperty('publishing.userName') != null && findProperty('publishing.password') != null) {
			credentials {
				username = property('publishing.userName')
				password = property('publishing.password')
			}
		}
	}
}
def repositoryName = "MavenRepository"

def getGroupName = { artifactName ->
	if (artifactName.startsWith('io.typefox.lsapi'))
		return 'io.typefox.lsapi'
	else if (artifactName.startsWith('org.eclipse.xtend'))
		return 'org.eclipse.xtend'
	else
		return 'org.eclipse.xtext'
}

def classifiersExtensions = [ new Tuple(null, 'jar'), new Tuple('sources', 'jar'), new Tuple('javadoc', 'jar'), new Tuple(null, 'pom') ]
def getArtifactFileName = { artifactName, classifierName, extensionName ->
	if (classifierName)
		"$buildDir/artifacts/$artifactName-${property('publish.version')}-${classifierName}.$extensionName"
	else
		"$buildDir/artifacts/$artifactName-${property('publish.version')}.$extensionName"
}

// Create separate configurations for each source repository
artifactsMap.entrySet().each { artifactsEntry ->
	def dependenciesConfig = configurations.create("dependencies${artifactsEntry.key}")
	def archivesConfig = configurations.create("archives${artifactsEntry.key}")
	def signaturesConfig = configurations.create("signatures${artifactsEntry.key}")
	
	// Step 1: Specify dependencies to Jenkins artifacts
	artifactsEntry.value.each { artifactName ->
		classifiersExtensions.each { ceTuple ->
			dependencies.add(dependenciesConfig.name, [
				group: getGroupName(artifactName),
				name: artifactName,
				version: property('publish.version'),
				classifier: ceTuple[0],
				ext: ceTuple[1]
			])
		}
	}
	
	// Step 2: Copy the dependencies to the local build folder
	def archivesCopyTask = task "copy${artifactsEntry.key}" (type: Copy) {
		description "Copy the built artifacts of ${artifactsEntry.key} into the build folder"
		from dependenciesConfig
		into "$buildDir/artifacts"
		artifactsEntry.value.each { artifactName ->
			include "**/$artifactName-${project.property('publish.version')}*.jar"
			include "**/$artifactName-${project.property('publish.version')}.pom"
		}
	}
	
	artifactsEntry.value.each { artifactName ->
		classifiersExtensions.each { ceTuple ->
			def archiveFile = file(getArtifactFileName(artifactName, ceTuple[0], ceTuple[1]))
			artifacts.add(archivesConfig.name, archiveFile) {
				name = artifactName
				classifier = ceTuple[0]
				builtBy archivesCopyTask
			}
		}
	}
	
	// Step 3: Sign the local artifacts
	if (doSigning) {
		signing.sign archivesConfig
		def signTask = tasks["signArchives${artifactsEntry.key}"]
		
		artifactsEntry.value.each { artifactName ->
			classifiersExtensions.each { ceTuple ->
				def signatureFile = file(getArtifactFileName(artifactName, ceTuple[0], ceTuple[1]) + '.asc')
				signTask.outputs.file signatureFile
				artifacts.add(signaturesConfig.name, signatureFile) {
					name = artifactName
					classifier = ceTuple[0]
					extension = ceTuple[1] + '.asc'
					builtBy signTask
				}
			}
		}
	}
	
	// Step 4: Create a publication for each project containing all artifacts and their signatures
	artifactsEntry.value.each { artifactName ->
		def publicationName = artifactName.replace('.', '')
		publishing.publications.create(publicationName, MavenPublication) { publication ->
			publication.groupId = getGroupName(artifactName)
			publication.artifactId = artifactName
			publication.version = property('publish.version')
			
			archivesConfig.artifacts.matching { artifact ->
				artifact.name == artifactName && artifact.extension != 'pom'
			}.each { artifact ->
				publication.artifact artifact
			}
			if (doSigning) {
				signaturesConfig.artifacts.matching { artifact ->
					artifact.name == artifactName
				}.each { artifact ->
					publication.artifact artifact
				}
			}
		}
		
		task "copy${publicationName.capitalize()}Pom" (type: Copy) {
			description "Copy the POM file for $artifactName to make it consumable by the maven-publish plugin"
			from getArtifactFileName(artifactName, null, 'pom')
			into "$buildDir/publications/$publicationName"
			rename {"pom-default.xml"}
			dependsOn archivesCopyTask
		}
	}
	
	task "publish${artifactsEntry.key}" {
		group "Publishing"
		description "Publishes all ${artifactsEntry.key} artifacts."
		artifactsEntry.value.each { artifactName ->
			dependsOn "publish${artifactName.replace('.', '').capitalize()}PublicationTo$repositoryName"
		}
	}
}

tasks.withType(GenerateMavenPom) {
	enabled = false
}

tasks.withType(PublishToMavenRepository) {
	dependsOn "copy${publication.name.capitalize()}Pom"
}
